---
layout: post
title:  "Why to prefer Engine.io over Socket.io"
date:   2014-04-19 19:00
categories: Rants
---

Socket.io v0.9 (current stable) is bad, doesn't scale and leaks memory. That is the lesson I learned
the hard way when [Volafile.io](http://volafile.io) hit the front-page of
Hacker News for a few hours. But instead of telling that story, I'll jump right
to the pain points of Socket.io v0.9.

Why Socket.io sucks
===================

Persistent Connections behind Load Balancers
--------------------------------------------

Socket.io tries to emulate WebSockets to the best of its ability for clients
that don't yet have support for these. A WebSocket would normally be a single
requests that stays open until the user leaves the page. To emulate that
behavior Socket.io uses many ordinary HTTP requests to move the various chunks
of data across the wire. A (Web-)Socket is always a connection between
a specific server and the client, which works well unless you are doing load
balancing. Suddenly all those single requests that are supposed to go to
a specific server are hitting different servers randomly.

To solve that problem Socket.io is able to leaverage Redis Pub/Sub (there are other ways available too) 
to deliver the messages to the correct server if they arrive at the wrong one. 
Now imagine 30 clients being connected to the same chat room (when Hacker News
came to Volafile we had up to 500), and one client sends a chat message. The
servers will now try to send that chat message to each of the connected
clients. In the worst case they're all connected to the wrong server and
Socket.io will have to broadcast the message 30 times through redis, once for each client.

That wasn't the worst part though. My servers were able to handle that.

Memory leaks
------------

What really bit us was some unfixed memory leak in Socket.io v0.9 that would make the Node.js instance 
grow until it ran out of RAM (with 500 people that happened every few minutes
and it got exponentially worse with every new user). Frequent crashes. Unhappy
users.

The Solution
============

After looking into a few alternatives I settled on Engine.io, which is
supposed to become the transport layer of Socket.io v1 (session layer). 
Engine.io doesn't support any passing around of messages between servers and 
assumes the requests will always hit the correct Node.js instance. I made that happen by putting 
a random number in the resource part of the URL, in the form http://volafile.io/api/*rand*/ 
and letting Engine.io connect to that URL. The load balancer would be configured in
a way that made sure that the same random URL would always hit the same server.
Problem solved.

The Improvement
===============

After making that change my servers went from hovering just below 100% CPU
utilization to being barely impressed by the load. LearnBoost (the makers of
Socket.io and Engine.io) did a good job with version 1.0 of Engine.io.

As Socket.io 1.0 doesn't exist yet, I recommend wrapping [Engine.io](https://github.com/LearnBoost/engine.io) in some code
to for persistent sessions. You don't want your
app to disconnect everytime your user loses connectivity for a split second or
the TCP connection gets killed for some reason. The code I use at Volafile.io is 
sadly tightly integrated with it, but I'll look into dumbing it
down into a more general version. It's only about 200 lines of JS after all.

[Follow Volafile on Twitter](https://twitter.com/volafile)
